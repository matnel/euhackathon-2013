<!DOCTYPE html>
<html>
  <head>
    <script src="./libs/jquery.js"></script>
    <script src="./libs/react.js"></script>
    <script src="./libs/JSXTransformer.js"></script>
    <script src="http://code.jquery.com/ui/1.10.3/jquery-ui.js"></script>
    <link rel="stylesheet" href="http://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css">
    <script src="./libs/bootstrap/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="./libs/bootstrap/css/bootstrap.min.css">

    <link rel="stylesheet" href="./style.css">
  </head>
  <body>

    <div id="example" style="margin: 10px;"></div>
    <script type="text/jsx">
    /** @jsx React.DOM */
    var Slider = React.createClass( {

      getInitialState: function() {
        return {
          value : 0
        };
      },

      render : function() {
        if( this.props.type != "slide" ) {
          return(<span></span>);
        }
        var component = this;
        return(<div>
          <div id = "tulos">
            {this.state.value}
          </div>
          <div id = "slideri">
          </div>
          </div>
        )
      },

      onSlide : function(event, ui) {
        this.props.answer(ui.value);
        this.setState({value : ui.value});

      },

      componentDidMount: function() {
        $("#slideri").slider({
            max: this.props.max,
            min: this.props.min,
            value: this.props.min,
            slide: this.onSlide
        });
      }


    });

    var Choice = React.createClass( {

      getInitialState: function() {
        return {
          selected : ''
        };
      },

      onSelect : function(event) {
        value = event.target.value;
        this.props.answer( value );
        this.setState( { selected : value } );
      },

      render : function() {
        if( this.props.type != "multichoice" ) {
          return(<span></span>);
        }
        var component = this;

        var selectors = {
          display: this.props.done ? 'none' : 'inline'
        };


        var numbers = {
          display: this.props.done? 'inline' : 'none'
        };  

        return(
          <div>
          {
            this.props.choices.map(function(c) {
              style = {
                'font-weight' : component.state.selected == c.name ? 'bold' : '',
                color : component.props.answered && c.correct ? 'green' : ''
              }
              return  (<p class="ok" key={c.name} style={style}>{c.name}
                        <input name="choice" type="radio" style={selectors} value={c.name} onChange={component.onSelect}></input>
                        <span style={numbers}>{c.number}</span>
                      </p>);
            })
          }
          </div>
        )
      }
    });

    var Question = React.createClass( {

      getInitialState: function() {
        return {
          answer: null,
        };
      },

      go : function() {
        console.log( this.props.q.correct );
        console.log( this.state.answer );
        this.props.correct( this.props.q.correct == this.state.answer );
      },

      saveAnswer : function(answer) {
        console.log( "save " + answer );
        this.setState( {answer: answer } );
      },

      render: function() {
        var s = {
          display: this.props.answered ? 'none' : 'inline'
        };
        var s2 = {
          display: this.props.answered ? 'inline' : 'none'
        }
          return (
          <div class="col-lg-6">
            <h1>{this.props.q.title}</h1>
            <div class="questions-box">
            <Choice type={this.props.q.type} choices={this.props.q.choices} answer={this.saveAnswer} done={this.props.answered} />
            <Slider type={this.props.q.type} max={30} min={2} answer={this.saveAnswer} />
            </div>
            <button class="btn btn-large btn-primary" onClick={this.go} style={s} >Ok, go</button>
            <button class="btn btn-large" onClick={this.props.next} style={s2}>Next</button>
          </div>
          );
      }
    });

     var Status = React.createClass( {
      render: function() {

        // purkka
        var imgs = [];
        for( var i = 0; i < this.props.flow; i++ ) {
          imgs.push('')
        }

        // todo: add different states
        var kori = "./images/kori" + this.props.normals + ".png";
        if( this.props.normals > 4) {
          kori = "./images/kori5.png";
        }

        return (
          <div id="nurmikko">
            <img src={kori} class="sieni" />
            {
              imgs.map( function(){
                return(
                  <img class="sieni" src='./images/sieni8.png' />
                  );
              })

            }
            {
              this.props.labels.map( function(c){
                var src = './images/' + c;
                return(<img class="sieni" src={src} />);
              } )
            }
          </div>
        );
      }
    } );

    var Avatar = React.createClass( {
      render: function() {
        var say = {
          display : this.props.say != "" ? 'inline' : 'none',
          border: '1px solid red',
          padding: '5px'
        }
      console.log( this.props.was_correct );
        var badger = this.props.was_correct ? './images/badger2.png' : './images/badger1.png' ;
        return (
          <div id="avatar" class="col-lg-6">
            <img src={badger} />
            <span style={say}>{this.props.say}</span>       
          </div>
        );
      }
    });

    _q = {};
    _q.title = "Minne matka?";
    _q.type = "multichoice";
    _q.choices = [  { name : 'Ruotsiin', number : '20' , correct : false } , 
                    { name : 'Saksaan', number : '10' , correct : false } ,
                    { name : 'Brysseliin', number : '20' , correct : true }
                 ];
    _q.correct = 'Brysseliin';


    var Main = React.createClass( {

      getInitialState: function() {
        return {
          say: '',
          correct : 0,
          all : 0,
          answered : false,
          was_correct : false,
          flow : 0,
          awards : []
        };
      },

      updateCorrect: function(ok) {
        this.setState( { answered: true });
        this.state.all++;

        var correct = this.state.correct;
        var flow = this.state.flow;
        var say = "";
        var awards = this.state.awards;
        var was_correct = false;

        if( ok ) {


          correct++;
          flow++;
          was_correct = true;
          
          if( correct == 3 ) {
            awards.push('sieni7.png');
            say = "Achievent unlocked! 3 correct.";
            flow--;
          }

          if( correct == 5 ) {
            awards.push('sieni10.png');
            say = "Achievent unlocked! 5 correct.";
            flow--;
          }
          
        } else {
          flow = 0;
          say = "It's a snake, it's a snake...";
        }

        if( flow < 0 ) flow = 0;

        this.setState( { awards : awards, say: say, correct: correct, flow: flow, was_correct : was_correct } );
      },

      next: function() {
        console.log("next");
        this.setState( { answered: false, was_correct : false } );
      },

      render: function() {
        return (
          <div>
            <div class="row">
              <Question q={_q} correct={this.updateCorrect} next={this.next} answered={this.state.answered} />
              <Avatar was_correct={this.state.was_correct}  say={this.state.say} number={this.state.correct} />
            </div>
            <Status normals={this.state.correct} flow={this.state.flow} labels={this.state.awards} />
          </div>
        );
      }

    } );

    React.renderComponent(
      <Main />,
      document.getElementById('example')
    );
    </script>
  </body>
</html>